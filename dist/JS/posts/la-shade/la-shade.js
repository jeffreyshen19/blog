import scroller from"/dist/JS/scrollytelling/scroller.js";var scrollVis=function(){function a(a){var b=d3.scaleLinear().domain([0,50]).range([0,c]),d=f(h[a]),g=d3.scaleLinear().range([e,0]).domain([0,d3.max(d,function(a){return a.length})]);d3.select(".y.axis").call(d3.axisLeft(g)),d3.select("svg").selectAll("rect").data(d).transition().duration(1e3).attr("x",1).attr("transform",function(a){return"translate("+b(a.x0)+","+g(a.length)+")"}).attr("width",function(a){return b(a.x1)-b(a.x0)}).attr("height",function(a){return e-g(a.length)})}/**
   * activate -
   *
   * @param index - index of the activated section
   */const b={top:50,right:30,bottom:70,left:55},c=document.getElementById("vis").offsetWidth-b.left-b.right,e=document.getElementById("vis").offsetHeight-b.top-b.bottom;// Which visualization we currently are on
var f,g,h,i=-1,j=0,k=[],l=[],m=function(a){a.each(function(a){n(a),o()})},n=function(a){h=a.histogramData;// Add histogram
var d=d3.select("#graph").append("svg").attr("width",c+b.left+b.right).attr("height",e+b.top+b.bottom).append("g").attr("transform","translate("+b.left+","+b.top+")"),i=d3.scaleLinear().domain([0,50]).range([0,c]);// Add X Axis
d.append("g").attr("class","x axis").attr("transform","translate(0,"+e+")").call(d3.axisBottom(i).tickFormat(a=>a+"%")),d.append("text").attr("transform",`translate(${c/2},${e+40})`).style("text-anchor","middle").style("font-family","IBMPlexSans").style("font-size",16).text("Percent of Census Tract Area Covered By Tree Canopy"),f=d3.histogram().value(function(a){return a})// I need to give the vector of value
.domain(i.domain())// then the domain of the graphic
.thresholds(i.ticks(25));// then the numbers of bins
// And apply this function to data to get the bins
var j=f(a.histogramData[0]),k=d3.median(a.histogramData[0]),l=i(k);d.append("text").attr("transform",`translate(${l}, ${-22})`).style("text-anchor","middle").style("font-family","IBMPlexSans").style("font-size",14).text(`Median (${d3.format(".2%")(k/100)})`),d.append("polygon").attr("points",`${l},-5 ${l-10},-15 ${l+10},-15`).style("fill","#24252a"),d.append("line").attr("x1",l).attr("x2",l).attr("y1",0).attr("y2",e).style("stroke","#24252a").style("stroke-width",1).style("stroke-dasharray","4");// Add Y Axis
var m=d3.scaleLinear().range([e,0]).domain([0,d3.max(j,function(a){return a.length})]);d.append("g").attr("class","y axis").call(d3.axisLeft(m)),d.append("text").attr("transform","rotate(-90)").attr("y",0-b.left).attr("x",0-e/2).attr("dy","1em").style("text-anchor","middle").style("font-family","IBMPlexSans").style("font-size",16).text("Number of Census Tracts"),g=d.selectAll("rect").data(j).enter().append("rect").attr("x",1).attr("transform",function(a){return"translate("+i(a.x0)+","+m(a.length)+")"}).attr("width",function(a){return i(a.x1)-i(a.x0)}).attr("height",function(a){return e-m(a.length)}).style("fill","#4e54c8")},o=function(){k[0]=function(){a(0)},l[0]=function(){},k[1]=function(){a(1)},l[1]=function(){},k[2]=function(){a(2)},l[2]=function(){}};// return chart function
return m.activate=function(a){j=a;var b=0>j-i?-1:1,c=d3.range(i+b,j+b,b);c.forEach(function(a){k[a]()}),i=j},m.update=function(a,b){l[a](b)},m};// Load data, then display
d3.json("/data/la-shade/census-tracts-2012.geojson").then(function(a){// Process data
let b=[[],[],[]];// Store the tree canopy cover, broken down by the median income of census tracts (lower, middle, upper income)
return a.features.forEach(function(a){let c=parseFloat(a.properties["TREE-PCT"]),d=parseInt(a.properties["median-income"]);isNaN(c)||isNaN(d)||(42e3>=d?b[0].push(c):125e3>=d?b[1].push(c)://Middle income
b[2].push(c))}),{geojson:a,histogramData:b}}).then(function(a){var b=scrollVis();d3.select("#vis").datum(a).call(b);var c=scroller().container(d3.select("#scrolling-vis"));c(d3.selectAll(".step")),c.on("active",function(a){d3.selectAll(".step").classed("active",function(b,c){return c===a}).style("opacity",function(b,c){return c===a?1:.1}),b.activate(a)}),c.on("progress",function(a,c){b.update(a,c)})}).catch(function(a){// handle error here
console.log(a)});