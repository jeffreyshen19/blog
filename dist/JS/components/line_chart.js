import Chart from"/dist/JS/components/chart.js";const e=React.createElement;class LineChart extends React.Component{constructor(a){super(a);const b={top:5,right:20,bottom:20,left:65};// Load data from csv
this.state={data:[],chart:null,width:0,height:(a.height||300)-b.top-b.bottom,margin:b,padding:{top:40,right:20,bottom:40,left:20},offset:0,body_width:0},d3.csv(a.csv).then(b=>{this.setState({data:b.map(function(b){return b[a.xcol]=d3.timeParse("%Y-%m-%d")(b[a.xcol]),a.ycols.split(",").forEach(function(a){b[a]=parseFloat(b[a])}),b})})})}updateDimensions(){//Calculate new width
let a=(d3.select("body").node().offsetWidth-d3.select("#body").node().offsetWidth)/2,b=d3.select("body").node().offsetWidth,c=d3.select("#body").node().offsetWidth-this.state.margin.left-this.state.margin.right-this.state.padding.left-this.state.padding.right+2*a;this.setState({width:c,offset:a,body_width:b})}componentDidMount(){this.updateDimensions(),window.addEventListener("resize",this.updateDimensions.bind(this));// Add D3 selector to state
let a=d3.select(this.props.chart);this.setState({chart:a})}renderGraph(){let a=this.state.margin,b=this.state.padding,c=this.props,d=this.state.chart,e=this.state.data,f=this.state.width,g=this.state.height,h=this.state.offset,i=this.state.body_width;// Set the ranges
var j=d3.scaleTime().range([0,f]),k=d3.scaleLinear().range([g,0]),l=d3.axisBottom(j),m=d3.axisLeft(k);// Define axes
400>i?l.ticks(d3.timeYear.every(8)):800>i?l.ticks(d3.timeYear.every(4)):l.ticks(d3.timeYear.every(2)),d.selectAll("*").remove();// Create canvas
var n=d.append("svg").attr("width",f+a.left+a.right).attr("height",g+a.top+a.bottom).style("transform","translate(-"+h+"px,0px)").append("g").attr("transform","translate("+a.left+","+a.top+")");// Add tooltip and tooltip line
d.append("div").attr("class","tooltip hidden");// Fit Domain
var o=d3.max(e,function(a){return Math.max(...c.ycols.split(",").map(function(b){return a[b]}))}),p=d3.extent(e,function(a){return a[c.xcol]});j.domain(p),k.domain([0,o]);// Render data
let q=c.linecolors.split(",");c.ycols.split(",").forEach(function(a,b){var d=d3.line().x(function(a){return j(a[c.xcol])}).y(function(b){return k(b[a])});n.append("path").attr("class","line").style("stroke",q[b]).attr("d",d(e))}),n.append("g").attr("class","x axis").attr("transform","translate(0,"+g+")").call(l),n.append("g").attr("class","y axis").call(m),d.insert("p",":first-child").html(c.title).attr("class","axis-label title"),d.append("p").attr("class","axis-label").style("text-align","center").html(c.xlabel),n.append("text").attr("transform","rotate(-90)").attr("class","axis-label").attr("y",0-a.left).attr("x",0-g/2).attr("dy","1em").text(c.ylabel);/*
      TOOLTIP
    */var r=c.ycols.split(","),s=c.linelabels.split(",");n.append("line").attr("class","tooltip-line hidden").attr("x1",j(p[0])).attr("y1",k(0)).attr("x2",j(p[0])).attr("y2",k(o)).style("stroke","black").style("stroke-width","1").style("stroke-dasharray","5,5");var t=d.select(".tooltip"),u=d.select(".tooltip-line"),v=d3.bisector(function(a){return a[c.xcol]}).right;let w=(a,b,c,d)=>({left:20+a[0]+b.node().offsetWidth>this.state.width+this.state.margin.left+this.state.margin.right?a[0]-10-b.node().offsetWidth-this.state.offset:a[0]+10-this.state.offset,top:d(0)-b.node().offsetHeight+this.state.margin.top+24});d.select("svg").on("mousemove",function(){var b=d3.mouse(this),d=j.invert(b[0]-a.left),f=v(e,d),g=e[f];null==g?(t.classed("hidden",!0),u.classed("hidden",!0)):(u.attr("x1",j(g[c.xcol])).attr("x2",j(g[c.xcol])).classed("hidden",!1),t.classed("hidden",!1).html("<strong>"+d3.timeFormat("%b %e, %Y")(g[c.xcol])+"</strong><br>"+r.map(function(a,b){return"<div class = 'tooltip-label'><div class = 'bubble' style = 'background-color:"+q[b]+"'></div>"+s[b]+": "+g[a].toFixed(2)+"</div>"}).join("")).style("left",w(b,t,j,k).left+"px").style("top",w(b,t,j,k).top+"px"))}).on("mouseout",function(){t.classed("hidden",!0),u.classed("hidden",!0)})}render(){// if(this.state.data.length && this.state.chart) this.renderGraph();
return React.createElement(Chart,null)}}// Render all line charts
let elements=document.getElementsByClassName("line-chart");for(let a=0;a<elements.length;a++)ReactDOM.render(e(LineChart,{...elements[a].dataset,chart:elements[a]}),elements[a]);